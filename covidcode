const express = require("express");
const app = express();

const path = require("path");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const dbPath = path.join(__dirname, "covid19India.db");
app.use(express.json());

let db = null;

const initializationAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error:${e.message}`);
    process.exit(1);
  };
};

initializationAndServer();

const convertToObject = (object) =>{
    return{
        stateId : object.state_id,
        stateName : object.state_name,
        population : object.population
    };
};

const convertResponseToObject = (district) => {
    return{
        districtId : district.district_id,
        districtName : district.district_name,
        stateId : district.state_id,
        cases : district.cases,
        cured : district.cured,
        active : district.active,
        deaths : district.deaths
    };
};

const convertResponseIntoObject = (stateReport) =>{
    return{
        totalCases : stateReport.cases,
        totalCured : stateReport.cured,
        totalActive : stateReport.active,
        totalDeaths : stateReport.deaths
    };
};

//get

app.get("/states/",async(request,response) =>{
    const {state_id,state_name,population} = request.body;
    const getAllStatesQuery = `
    SELECT
       *
    FROM 
       states
    ORDER BY
       state_id`;
    const result = await db.all(getAllStatesQuery);
    response.send(
        result.map((each) => ({stateId:each.state_id,stateName:each.state_name,population:each.population})
        )
    );
});

// get

app.get("/states/:stateId/",async(request,response)=>{
    const details = request.body;
    const {stateId} = details.params;
    const getStateQuery = `
    SELECT
       *
    FROM state
    WHERE state_id = ${stateId}`;

    const state = await db.all(getStateQuery);
    response.send(convertToObject(state))
});

//post

app.post("/districts/",asyn(request,response){
    const details = request.body;
    const {districtName,stateId,cases,cured,active,deaths} = details
    const postQuery = `
    INSERT INTO
         district(district_name,state_id,cases,cured,active,deaths)
    VALUES('${districtName}',
         ${stateId},
         ${cases},
         ${cured},
         ${active},
         ${deaths}
    );
    `;
    const resultPost = await db.run(postQuery);
    response.send("District Successfully Added")
});

//get

app.get("/districts/:districtId/",async(request,response)=>{
    const {districtId} = request.params;
    const districtQuery = `SELECT
      *
    FROM
      district
    WHERE district_id = ${districtId};`;
    const getDistrict = await db.all(districtQuery);
    response.send(covertResponseToObject)
});

//delete

app.delete("/districts/:districtId/",async(request,response) =>{
    const {districtId} = request.params;
    const deleteQuery = `DELETE FROM
        district
    WHERE 
        district_id = ${districtId};`;
    await db.run(deleteQuery)
    response.send("District Removed");
});

//put

app.put("/districts/:districtId/",async(request.response) =>{
    const{districtName,stateId,cured,active,deaths} = request.body;
    const {districtId} = request.params;
    const putQuery = `UPDATE
       district
    SET(
        district_name = '${districtName}',
        state_id = ${stateId},
        cured = ${cured},
        active = ${active},
        deaths = ${deaths}
    )
    WHERE
        district_id = ${district_id};`;
    await db.run(putQuery);
    response.send("District Details Updated")
});

//Returns the statistics of total cases, cured, active, deaths of a specific state based on state ID


app.get("/states/:stateId/stats/",async(request,response)=>{
    const {stateId} = request.params;
    const stateDetails = `SELECT
       SUM(cases) AS cases,
       SUM(cured) AS cured,
       SUM(active) AS active,
       SUM(deaths) AS deaths
    FROM
       district
    WHERE state_id = ${stateId};`;
    const stateReport = await db.get(stateDetails);
    response.send(convertResponseIntoObject(stateReport));
});

// Returns an object containing the state name of a district based on the district ID

app.get("/districts/:districtId/details/",async(request,response)=>{
    const {districtId} = request.params;
    const getStateNameQuery = `
    SELECT
       state_name
    FROM
       state JOIN district
       ON state.state_id = district.district_id
    WHERE
        district.district_id = ${districtId};`;
    const getStateName = await db.get(getStateNameQuery);
    response.send({stateName: getStateName.state_name});
});

module.exports = app;
